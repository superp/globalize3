h1. Globalize3

Globalize3 is the successor of Globalize for Rails. Globalize is targeted at ActiveRecord 3. It is compatible with and builds on the new "I18n api in Ruby on Rails":http://guides.rubyonrails.org/i18n.html and adds model translations to ActiveRecord.

Globalize3 is much more lightweight and compatible than its predecessor Globalize for Rails was. Model translations in Globalize3 use default ActiveRecord features and do not limit any ActiveRecord functionality any more.

h2. Requirements

ActiveRecord > 3.0.0
I18n

h2. Installation

To install Globalize3 with its default setup just use:

<pre><code>
$ gem 'globalize3', :git => 'git://github.com/superp/globalize3.git'
</code></pre>

h2. Model translations

Model translations allow you to translate your models' attribute values. E.g.

<pre><code>
class Post < ActiveRecord::Base
  translates :title => :string, :content => :text
end
</code></pre>

Allows you to translate the attributes :title and :content per locale:

<pre><code>
I18n.locale = :en
post.title # => Globalize3 rocks!

I18n.locale = :he
post.title # => גלובאלייז2 שולט!

post.title_en # => Globalize3 rocks!
post.title_he # => גלובאלייז2 שולט!

post.title_en = "Globalize3 Super"
post.title_he = "Globalize3 שולט"
</code></pre>

Configuration available locales list (by default it returns I18n.available_locales):

<pre><code>
  Globalize.available_locales = [:en, :ru]
</pre></code>

In order to make this work, you'll need to add the appropriate translation tables. You must call special rake tasks:

<pre><code>
# create translation tables; add, change or remove translation columns
rake db:globalize:up

# drop all translation tables
rake db:globalize:down
</code></pre>

Note that the ActiveRecord model @Post@ must already exist and have a @translates@ directive listing the translated fields.
